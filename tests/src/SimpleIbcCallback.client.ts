/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.9.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, GetCountResponse, IbcExecuteMsg, IncrementMsgAcknowledgement, InstantiateMsg, QueryMsg } from "./SimpleIbcCallback.types";
export interface SimpleIbcCallbackReadOnlyInterface {
  contractAddress: string;
  getCount: ({
    count
  }: {
    count: string;
  }) => Promise<GetCountResponse>;
}
export class SimpleIbcCallbackQueryClient implements SimpleIbcCallbackReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getCount = this.getCount.bind(this);
  }

  getCount = async ({
    count
  }: {
    count: string;
  }): Promise<GetCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_count: {
        count
      }
    });
  };
}
export interface SimpleIbcCallbackInterface extends SimpleIbcCallbackReadOnlyInterface {
  contractAddress: string;
  sender: string;
  increment: ({
    callback,
    channel
  }: {
    callback: boolean;
    channel: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  firstIncrementCallback: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SimpleIbcCallbackClient extends SimpleIbcCallbackQueryClient implements SimpleIbcCallbackInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increment = this.increment.bind(this);
    this.firstIncrementCallback = this.firstIncrementCallback.bind(this);
  }

  increment = async ({
    callback,
    channel
  }: {
    callback: boolean;
    channel: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increment: {
        callback,
        channel
      }
    }, fee, memo, funds);
  };
  firstIncrementCallback = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      first_increment_callback: {}
    }, fee, memo, funds);
  };
}